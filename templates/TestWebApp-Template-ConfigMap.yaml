apiVersion: v1
kind: Template
metadata:
  labels:
    application: payaratest
  annotations:
    description: "A Payara Glassfish Example Application with PostgreSQL database"
    iconClass: icon-java
    tags: "instant-app,java,payara,postgresql"
  creationTimestamp: null
  name: payaratest
objects:
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      app: payaratest
    name: payaratest
  spec:
    host: ${APPLICATION_DOMAIN}
    port:
      targetPort: 8081-tcp
    to:
      kind: Service
      name: payaratest
    tls:
      termination: passthrough
- apiVersion: v1
  kind: Service
  metadata:
    annotations: {}
    creationTimestamp: null
    labels:
      app: payaratest
    name: payaratest
  spec:
    ports:
    - name: 8000-tcp
      port: 8000
      protocol: TCP
      targetPort: 8000
    - name: 8081-tcp
      port: 8081
      protocol: TCP
      targetPort: 8081
    selector:
      app: payaratest
      deploymentconfig: payaratest
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations: {}
    creationTimestamp: null
    labels:
      app: payaratest
    name: ${DATABASE_SERVICE_NAME}
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: ${DATABASE_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations: {}
    creationTimestamp: null
    labels:
      app: payaratest
    name: payaratest
  spec:
    replicas: 1
    selector:
      app: payaratest
      deploymentconfig: payaratest
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/container.payaratest.image.entrypoint: '["container-entrypoint","/usr/local/sti/usage"]'
        creationTimestamp: null
        labels:
          app: payaratest
          deploymentconfig: payaratest
      spec:
        containers:
        - env: { }
          image: ' '
          imagePullPolicy: Always
          name: payaratest
          ports:
          - containerPort: 8000
            name: jolokia
            protocol: TCP
          - containerPort: 8081
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /home/payara/paasDomain/application/TestWebApp/config
            name: config
        volumes:
        - name: config
          configMap:
            name: server-config
            items:
            - key: server-config-file
              path: server_config.txt
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - payaratest
        from:
          kind: ImageStreamTag
          name: payaratest:latest
      type: ImageChange
  status: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations: {}
    creationTimestamp: null
    labels:
      app: payaratest
    name: ${DATABASE_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${DATABASE_SERVICE_NAME}
    strategy:
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          app: payara-test
          name: ${DATABASE_SERVICE_NAME}
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            value: ${DATABASE_USER}
          - name: POSTGRESQL_PASSWORD
            value: ${DATABASE_PASSWORD}
          - name: POSTGRESQL_DATABASE
            value: ${DATABASE_NAME}
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: ${DATABASE_SERVICE_NAME}
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: postgresql-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: postgresql-data
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: bmwpostgresql:9.5
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status: {}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations: {}
    creationTimestamp: null
    labels:
      app: payaratest
    name: payaratest
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: payaratest:latest
    postCommit: {}
    resources: {}
    source:
      git:
        uri: ${SOURCE_REPOSITORY_URL}
        ref: ${SOURCE_REPOSITORY_REF}
      contextDir: ${SOURCE_CONTEXT_DIR}
      secrets: []
      sourceSecret:
        name: ${SOURCE_SECRET_NAME}
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: java_premium-sti:latest
          namespace: openshift
      type: Source
    triggers:
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_WEBHOOK_SECRET}
      type: Generic
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations: {}
    creationTimestamp: null
    generation: 1
    labels:
      app: payaratest
    name: payaratest
  spec:
    tags:
    - annotations: null
      name: latest
parameters:
- name: "SOURCE_REPOSITORY_URL"
  description: "The URL of the repository with your application source code"
  value: "http://cnap-git.bmwgroup.net/openshift-training/example.git"
- name: "SOURCE_REPOSITORY_REF"
  description: "Set this to a branch name, tag or other ref of your repository if you are not using the default branch"
- name: "SOURCE_CONTEXT_DIR"
  description: "Set this to the relative path to your project if it is not in the root of your repository"
- name: "SOURCE_SECRET_NAME"
  description: "Credentials to access the GitLab repository"
  value: "mygitsecret"
- name: "APPLICATION_DOMAIN"
  description: "The exposed hostname that will route to the CakePHP service"
  value: ""
- name: "GITHUB_WEBHOOK_SECRET"
  description: "A secret string used to configure the GitHub webhook"
  generate: "expression"
  from: "[a-zA-Z0-9]{40}"
- name: "GENERIC_WEBHOOK_SECRET"
  description: "A secret string used to configure a Generic webhook"
  generate: "expression"
  from: "[a-zA-Z0-9]{40}"
- name: "DATABASE_SERVICE_NAME"
  description: "Database service name"
  value: "postgresql"
- name: "DATABASE_NAME"
  description: "Database name"
  value: "trainingdb"
- name: "DATABASE_USER"
  description: "Database user name"
  value: "training"
- name: "DATABASE_PASSWORD"
  description: "Database user password"
  generate: "expression"
  from: "[a-zA-Z0-9]{16}"
